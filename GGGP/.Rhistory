}
crossover <- function(parents) {
s_p1_parts <- extract_hidden_layers(parents$architecture[[1]])
s_p2_parts <- extract_hidden_layers(parents$architecture[[2]])
random_s_p1 <- sample(s_p1_parts, 1)
random_s_p2 <- sample(s_p2_parts, 1)
s_p1_parts <- lapply(s_p1_parts, function(x) {if(x==random_s_p1) {random_s_p2} else {x}})
s_p2_parts <- lapply(s_p2_parts, function(x) {if(x==random_s_p2) {random_s_p1} else {x}})
df <- data.frame(id = integer(),
architecture = character(),
evaluated = logical(),
loss = double(),
metric = double(),
saved_model = character(),
stringsAsFactors = FALSE)
df <- rbind(df, data.frame(id = id, architecture = toString(add_inout_layers(s_p1_parts)), evaluated = FALSE, loss = NA, metric = NA, saved_model = NA))
id <<- id + 1
df <- rbind(df, data.frame(id = id, architecture = toString(add_inout_layers(s_p2_parts)), evaluated = FALSE, loss = NA, metric = NA, saved_model = NA))
id <<- id + 1
return(df)
}
replacement <- function(children) {
max_population <- rbind(population, children)
ordered_max_population <- max_population[order(unlist(max_population$loss)),]
return(ordered_max_population[c(1:p),])
}
############################################################### AUXILIARY FUNCTIONS ###############################################################
add_inout_layers <- function(hidden) {
return(paste(strrep("n", I), "/", paste0(hidden, collapse = "/"), "/", strrep("n", O), sep = ""))
}
extract_hidden_layers <- function(architecture) {
split <- strsplit(architecture, split = "/")
return(tail(head(split[[1]], -1), -1))
}
###################################################################################################################################################
################################################################# MAIN  ALGORITHM #################################################################
###################################################################################################################################################
data <- read.table("../datasets/classification/car.data", sep = ",")
colnames(data) <- c("buying", "maint", "doors", "persons", "lug_boot", "safety", "acceptability")
dummy_data <- dummyVars(" ~ .", data = data[,c(1,2,5:7)])
trsf <- data.frame(predict(dummy_data, newdata = data[,c(1,2,5:7)]))
trsf$doors <- data$doors
trsf$persons <- data$persons
data <- trsf[,c(1:14,19,20,15:18)]
n <- nrow(data)
set.seed(123)
shuffled_df <- as.data.frame(data[sample(n),])
colnames(shuffled_df) <- gsub("[^a-zA-Z]*", "", colnames(shuffled_df))
c <- colnames(shuffled_df)
train <- shuffled_df[1: round(0.7*n),]
validation <- shuffled_df[(round(0.7*n)+1):round(0.9*n),]
test <- shuffled_df[(round(0.9*n)+1):n,]
X_train <- train[,head(colnames(shuffled_df), -4)] %>% as.matrix()
y_train <- train[,tail(colnames(shuffled_df), 4)] %>% as.matrix()
X_validation <- validation[,head(colnames(shuffled_df), -4)] %>% as.matrix()
y_validation <- validation[,tail(colnames(shuffled_df), 4)] %>% as.matrix()
X_test <- test[,head(colnames(shuffled_df), -4)] %>% as.matrix()
y_test <- test[,tail(colnames(shuffled_df), 4)] %>% as.matrix()
I <- length(colnames(X_train))
O <- length(colnames(y_train))
# Repair execution_results.rds
for (bad_execution in bad_executions) {
individuals <- list.files(paste0(TARGET_FOLDER, "/", bad_execution, "/history/"))
individual_ranking <- data.frame(individual = character(),
acc_train = numeric(),
acc_validation = numeric(),
numeric(), stringsAsFactors = FALSE)
for (individual in individuals) {
aux <- readRDS(paste0(TARGET_FOLDER, "/", bad_execution, "/history/", individual))
ranking_tr <- aux[aux$metric == "acc" & aux$data == "training",]
ranking_tr<- ranking_tr[order(ranking_tr$value, decreasing = TRUE),]
ranking_val <- aux[aux$metric == "acc" & aux$data == "validation",]
ranking_val<- ranking_val[order(ranking_val$value, decreasing = TRUE),]
model_name <- str_replace_all(individual, ".rds", "")
model <- load_model_hdf5(paste0(TARGET_FOLDER, "/", bad_execution, "/model/", model_name, ".h5"))
acc_test <- (model %>% evaluate(X_test, y_test))['acc'][[1]]
individual_ranking <- rbind(individual_ranking, data.frame(architecture = gsub("-.*", "", individual),
acc_train = ranking_tr[1,]$value,
acc_validation = ranking_val[1,]$value,
acc_test = acc_test,
saved_model = individual))
}
individual_ranking <- individual_ranking[order(individual_ranking$acc_train, decreasing = TRUE),]
saveRDS(individual_ranking[1,], paste0(TARGET_FOLDER, "/", bad_execution, "/", "execution_results.rds"))
}
library("xlsx")
library("ggplot2")
library("sets")
library("keras")
library("stringr")
library("gtools")
# setwd("D:/Usuarios/cvazquezlos/GitHub/Genetic-programming-for-Artificial-Neural-Networks/results")
setwd("~/GitHub/Evolutionary-Approaches-for-Artificial-Neural-Networks/results")
TARGET_FOLDER <- "./classification/car/partial"
BASE_DATA_FRAME <- data.frame(architecture = character(),
saved_model = character(),
acc_train = double(),
acc_validation = double(),
acc_test = double(),
stringsAsFactors = FALSE)
executions <- list.files(TARGET_FOLDER)
bad_executions <- list()
executions_results <- BASE_DATA_FRAME
y <- lapply(executions, function (x) {
tryCatch({
df = readRDS(paste0(TARGET_FOLDER, "/", x, "/final_population.rds"))
}, error = function(cond) {
bad_executions <<- c(bad_executions, x)
}, warning = function(cond) {
bad_executions <<- c(bad_executions, x)
})
})
rm("y")
bad_executions <- unlist(bad_executions)
# Repair execution_results.rds
for (bad_execution in bad_executions) {
individuals <- list.files(paste0(TARGET_FOLDER, "/", bad_execution, "/history/"))
individual_ranking <- data.frame(individual = character(),
acc_train = numeric(),
acc_validation = numeric(),
numeric(), stringsAsFactors = FALSE)
for (individual in individuals) {
aux <- readRDS(paste0(TARGET_FOLDER, "/", bad_execution, "/history/", individual))
ranking_tr <- aux[aux$metric == "acc" & aux$data == "training",]
ranking_tr<- ranking_tr[order(ranking_tr$value, decreasing = TRUE),]
ranking_val <- aux[aux$metric == "acc" & aux$data == "validation",]
ranking_val<- ranking_val[order(ranking_val$value, decreasing = TRUE),]
model_name <- str_replace_all(individual, ".rds", "")
model <- load_model_hdf5(paste0(TARGET_FOLDER, "/", bad_execution, "/model/", model_name, ".h5"))
acc_test <- (model %>% evaluate(X_test, y_test))['acc'][[1]]
individual_ranking <- rbind(individual_ranking, data.frame(architecture = gsub("-.*", "", individual),
acc_train = ranking_tr[1,]$value,
acc_validation = ranking_val[1,]$value,
acc_test = acc_test,
saved_model = individual))
}
individual_ranking <- individual_ranking[order(individual_ranking$acc_train, decreasing = TRUE),]
saveRDS(individual_ranking[1,], paste0(TARGET_FOLDER, "/", bad_execution, "/", "execution_results.rds"))
}
# Repair execution_results.rds
for (bad_execution in bad_executions) {
individuals <- list.files(paste0(TARGET_FOLDER, "/", bad_execution, "/history/"))
individual_ranking <- data.frame(individual = character(),
acc_train = numeric(),
acc_validation = numeric(),
numeric(), stringsAsFactors = FALSE)
for (individual in individuals) {
aux <- readRDS(paste0(TARGET_FOLDER, "/", bad_execution, "/history/", individual))
ranking_tr <- aux[aux$metric == "acc" & aux$data == "training",]
ranking_tr<- ranking_tr[order(ranking_tr$value, decreasing = TRUE),]
ranking_val <- aux[aux$metric == "acc" & aux$data == "validation",]
ranking_val<- ranking_val[order(ranking_val$value, decreasing = TRUE),]
model_name <- str_replace_all(individual, ".rds", "")
model <- load_model_hdf5(paste0(TARGET_FOLDER, "/", bad_execution, "/model/", model_name, ".h5"))
acc_test <- (model %>% evaluate(X_test, y_test))['acc'][[1]]
individual_ranking <- rbind(individual_ranking, data.frame(architecture = gsub("-.*", "", individual),
acc_train = ranking_tr[1,]$value,
acc_validation = ranking_val[1,]$value,
acc_test = acc_test,
saved_model = individual))
}
individual_ranking <- individual_ranking[order(individual_ranking$acc_train, decreasing = TRUE),]
saveRDS(individual_ranking[1,], paste0(TARGET_FOLDER, "/", bad_execution, "/", "execution_results.rds"))
}
# Repair execution_results.rds
for (bad_execution in bad_executions) {
individuals <- list.files(paste0(TARGET_FOLDER, "/", bad_execution, "/history/"))
individual_ranking <- data.frame(individual = character(),
acc_train = numeric(),
acc_validation = numeric(),
numeric(), stringsAsFactors = FALSE)
for (individual in individuals) {
aux <- readRDS(paste0(TARGET_FOLDER, "/", bad_execution, "/history/", individual))
ranking_tr <- aux[aux$metric == "acc" & aux$data == "training",]
ranking_tr<- ranking_tr[order(ranking_tr$value, decreasing = TRUE),]
ranking_val <- aux[aux$metric == "acc" & aux$data == "validation",]
ranking_val<- ranking_val[order(ranking_val$value, decreasing = TRUE),]
model_name <- str_replace_all(individual, ".rds", "")
model <- load_model_hdf5(paste0(TARGET_FOLDER, "/", bad_execution, "/model/", model_name, ".h5"))
acc_test <- (model %>% evaluate(X_test, y_test))['acc'][[1]]
individual_ranking <- rbind(individual_ranking, data.frame(architecture = gsub("-.*", "", individual),
acc_train = ranking_tr[1,]$value,
acc_validation = ranking_val[1,]$value,
acc_test = acc_test,
saved_model = individual))
}
individual_ranking <- individual_ranking[order(individual_ranking$acc_train, decreasing = TRUE),]
saveRDS(individual_ranking[1,], paste0(TARGET_FOLDER, "/", bad_execution, "/", "execution_results.rds"))
}
library("xlsx")
library("ggplot2")
library("sets")
library("keras")
library("stringr")
library("gtools")
# Repair execution_results.rds
for (bad_execution in bad_executions) {
individuals <- list.files(paste0(TARGET_FOLDER, "/", bad_execution, "/history/"))
individual_ranking <- data.frame(individual = character(),
acc_train = numeric(),
acc_validation = numeric(),
numeric(), stringsAsFactors = FALSE)
for (individual in individuals) {
aux <- readRDS(paste0(TARGET_FOLDER, "/", bad_execution, "/history/", individual))
ranking_tr <- aux[aux$metric == "acc" & aux$data == "training",]
ranking_tr<- ranking_tr[order(ranking_tr$value, decreasing = TRUE),]
ranking_val <- aux[aux$metric == "acc" & aux$data == "validation",]
ranking_val<- ranking_val[order(ranking_val$value, decreasing = TRUE),]
model_name <- str_replace_all(individual, ".rds", "")
model <- load_model_hdf5(paste0(TARGET_FOLDER, "/", bad_execution, "/model/", model_name, ".h5"))
acc_test <- (model %>% evaluate(X_test, y_test))['acc'][[1]]
individual_ranking <- rbind(individual_ranking, data.frame(architecture = gsub("-.*", "", individual),
acc_train = ranking_tr[1,]$value,
acc_validation = ranking_val[1,]$value,
acc_test = acc_test,
saved_model = individual))
}
individual_ranking <- individual_ranking[order(individual_ranking$acc_train, decreasing = TRUE),]
saveRDS(individual_ranking[1,], paste0(TARGET_FOLDER, "/", bad_execution, "/", "execution_results.rds"))
}
# Repair execution_results.rds
for (bad_execution in bad_executions) {
individuals <- list.files(paste0(TARGET_FOLDER, "/", bad_execution, "/history/"))
individual_ranking <- data.frame(architecture = character(),
acc_train = numeric(),
acc_validation = numeric(),
saved_model = character(), stringsAsFactors = FALSE)
for (individual in individuals) {
aux <- readRDS(paste0(TARGET_FOLDER, "/", bad_execution, "/history/", individual))
ranking_tr <- aux[aux$metric == "acc" & aux$data == "training",]
ranking_tr<- ranking_tr[order(ranking_tr$value, decreasing = TRUE),]
ranking_val <- aux[aux$metric == "acc" & aux$data == "validation",]
ranking_val<- ranking_val[order(ranking_val$value, decreasing = TRUE),]
model_name <- str_replace_all(individual, ".rds", "")
individual_ranking <- rbind(individual_ranking, data.frame(architecture = gsub("-.*", "", model_name),
acc_train = ranking_tr[1,]$value,
acc_validation = ranking_val[1,]$value,
saved_model = individual))
}
individual_ranking <- individual_ranking[order(individual_ranking$acc_train, decreasing = TRUE),]
best <- individual_ranking[1,]
model_name <- str_replace_all(best$saved_model, ".rds", "")
model <- load_model_hdf5(paste0(TARGET_FOLDER, "/", bad_execution, "/model/", model_name, ".h5"))
acc_test <- (model %>% evaluate(X_test, y_test))['acc'][[1]]
best$acc_test <- acc_test
saveRDS(individual_ranking[1,], paste0(TARGET_FOLDER, "/", bad_execution, "/", "execution_results.rds"))
}
execution_results <- readRDS("~/GitHub/Evolutionary-Approaches-for-Artificial-Neural-Networks/results/classification/car/partial/1/execution_results.rds")
View(execution_results)
# Repair execution_results.rds
for (bad_execution in bad_executions) {
individuals <- list.files(paste0(TARGET_FOLDER, "/", bad_execution, "/history/"))
individual_ranking <- data.frame(architecture = character(),
acc_train = numeric(),
acc_validation = numeric(),
saved_model = character(), stringsAsFactors = FALSE)
for (individual in individuals) {
aux <- readRDS(paste0(TARGET_FOLDER, "/", bad_execution, "/history/", individual))
ranking_tr <- aux[aux$metric == "acc" & aux$data == "training",]
ranking_tr<- ranking_tr[order(ranking_tr$value, decreasing = TRUE),]
ranking_val <- aux[aux$metric == "acc" & aux$data == "validation",]
ranking_val<- ranking_val[order(ranking_val$value, decreasing = TRUE),]
model_name <- str_replace_all(individual, ".rds", "")
individual_ranking <- rbind(individual_ranking, data.frame(architecture = gsub("-.*", "", model_name),
acc_train = ranking_tr[1,]$value,
acc_validation = ranking_val[1,]$value,
saved_model = individual))
}
individual_ranking <- individual_ranking[order(individual_ranking$acc_train, decreasing = TRUE),]
best <- individual_ranking[1,]
model_name <- str_replace_all(best$saved_model, ".rds", "")
model <- load_model_hdf5(paste0(TARGET_FOLDER, "/", bad_execution, "/model/", model_name, ".h5"))
acc_test <- (model %>% evaluate(X_test, y_test))['acc'][[1]]
best$acc_test <- acc_test
colnames(best) <- c("architecture", "acc_train", "acc_validation", "saved_model", "acc_test")
saveRDS(best, paste0(TARGET_FOLDER, "/", bad_execution, "/", "execution_results.rds"))
}
execution_results <- readRDS("~/GitHub/Evolutionary-Approaches-for-Artificial-Neural-Networks/results/classification/car/partial/10/execution_results.rds")
View(execution_results)
execution_results <- readRDS("~/GitHub/Evolutionary-Approaches-for-Artificial-Neural-Networks/results/classification/car/partial/29/execution_results.rds")
View(execution_results)
library("xlsx")
library("ggplot2")
library("sets")
library("keras")
library("stringr")
# setwd("D:/Usuarios/cvazquezlos/GitHub/Genetic-programming-for-Artificial-Neural-Networks/results")
setwd("~/GitHub/Evolutionary-Approaches-for-Artificial-Neural-Networks/results")
TARGET_FOLDER <- "./classification/car/partial"
# Analysis of the resulting dataframes for each execution
BASE_DATA_FRAME <- data.frame(architecture = character(),
saved_model = character(),
acc_train = double(),
acc_validation = double(),
acc_test = double(),
stringsAsFactors = FALSE)
executions <- list.files(TARGET_FOLDER)
executions_results <- BASE_DATA_FRAME
y <- lapply(executions, function (x) {
df = readRDS(paste0(TARGET_FOLDER, "/", x, "/execution_results.rds"))
executions_results <<- rbind(executions_results, df[,c("architecture", "saved_model", "acc_train", "acc_validation", "acc_test")])
})
rm("y")
executions_results$architecture <- as.character(executions_results$architecture)
executions_results$architecture <- gsub("_", "/", executions_results$architecture)
executions_results$saved_model <- NULL
analysis_results <- aggregate(executions_results[,c(1:4)],
by = list(executions_results$architecture),
FUN = mean)
analysis_results$architecture <- NULL
colnames(analysis_results) <- c("architecture", "acc_train", "acc_validation", "acc_test")
analysis_results$architecture <- gsub("_", "/", analysis_results$architecture)
analysis_results$percentage <- unlist(lapply(analysis_results$architecture, function(x) {
round((nrow(executions_results[executions_results$architecture == x,])/nrow(executions_results) * 100), 2)
}))
analysis_results <- analysis_results[order(analysis_results$percentage, decreasing = TRUE),]
row.names(analysis_results) <- c(1:nrow(analysis_results))
write.csv(analysis_results, file = "../results/classification/car/executions_results_partial.csv")
write.xlsx(analysis_results, file = "../results/classification/car/executions_results_partial.xlsx")
# Plotting the executions
executions_plotting_data <- data.frame(generation = c(1:29), stringsAsFactors = F)
z <- lapply(c(1:80), function(x) {
df = readRDS(paste0("../results/classification/car/partial/", x, "/", x, "_results.rds"))[, c(2:3)]
n_colnames = c(paste0("avg_loss", x), paste0("best_loss", x))
colnames(df) = n_colnames
n = nrow(df)
if (n != 29) {
remaining_rows = 29 - n
aux = data.frame(col1 = rep(NA, remaining_rows), col2 = rep(NA, remaining_rows), stringsAsFactors = F)
colnames(aux) = n_colnames
df = rbind(df, aux)
}
df[,paste0("avg_loss", x)] = as.double(df[,paste0("avg_loss", x)])
df[,paste0("best_loss", x)] = as.double(df[,paste0("best_loss", x)])
executions_plotting_data <<- cbind(executions_plotting_data, df)
})
avg_selected_cols <- colnames(executions_plotting_data)[c(FALSE, TRUE)]
best_selected_cols <- tail(colnames(executions_plotting_data)[c(TRUE, FALSE)], -1)
avg_loss_mean <- rowMeans(executions_plotting_data[,avg_selected_cols], na.rm = TRUE)
best_loss_mean <- rowMeans(executions_plotting_data[,best_selected_cols], na.rm = TRUE)
executions_plotting_data <- cbind(executions_plotting_data, avg_loss_mean)
executions_plotting_data <- cbind(executions_plotting_data, best_loss_mean)
executions_plot <- ggplot(data = executions_plotting_data, aes(x = generation)) +
geom_point(aes(y = avg_loss1), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss2), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss3), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss4), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss5), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss6), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss7), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss8), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss9), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss10), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss11), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss12), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss13), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss14), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss15), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss16), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss17), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss18), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss19), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss20), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss21), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss22), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss23), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss24), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss25), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss26), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss27), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss28), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss29), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss30), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss31), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss32), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss33), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss34), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss35), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss36), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss37), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss38), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss39), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss40), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss41), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss42), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss43), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss44), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss45), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss46), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss47), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss48), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss49), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss50), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss51), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss52), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss53), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss54), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss55), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss56), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss57), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss58), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss59), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss60), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss61), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss62), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss63), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss64), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss65), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss66), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss67), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss68), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss69), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss70), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss71), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss72), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss73), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss74), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss75), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss76), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss77), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss78), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss79), shape = 20, colour = "gray") +
geom_point(aes(y = avg_loss80), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss1), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss2), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss3), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss4), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss5), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss6), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss7), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss8), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss9), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss10), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss11), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss12), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss13), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss14), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss15), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss16), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss17), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss18), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss19), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss20), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss21), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss22), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss23), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss24), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss25), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss26), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss27), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss28), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss29), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss30), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss31), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss32), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss33), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss34), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss35), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss36), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss37), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss38), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss39), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss40), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss41), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss42), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss43), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss44), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss45), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss46), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss47), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss48), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss49), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss50), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss51), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss52), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss53), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss54), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss55), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss56), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss57), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss58), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss59), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss60), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss61), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss62), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss63), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss64), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss65), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss66), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss67), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss68), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss69), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss70), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss71), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss72), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss73), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss74), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss75), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss76), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss77), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss78), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss79), shape = 20, colour = "gray") +
geom_point(aes(y = best_loss80), shape = 20, colour = "gray") +
geom_line(aes(y = avg_loss_mean, colour = "Media"), size = 1) +
geom_line(aes(y = best_loss_mean, colour = "Mejores"), size = 1) +
xlab("Generaciones") +
scale_x_continuous(breaks = c(1:29)) +
ylab("Fitness") +
scale_y_continuous(breaks = c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5)) +
scale_colour_manual("Individuos", values = c("Media" = "red", "Mejores" = "blue")) +
ggtitle("Evolución de la población y sus individuos totalmente entrenados en las 29 generaciones para el problema de Car") + theme_classic() + theme(plot.title = element_text(hjust = 0.5))
print(executions_plot)
