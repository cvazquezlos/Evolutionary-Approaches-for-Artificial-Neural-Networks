geom_density(aes(x = acc_train)) +
xlab("") +
ylab("") +
ggtitle("Comparativa de las ejecuciones para\nlos datos de pruebas") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 20, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 25, hjust = 0.5, margin = margin(0, 0, 25, 0)))
ggplot(executions_results) +
geom_density(aes(x = acc_train)) +
xlab("") +
ylab("") +
ggtitle("Entrenamiento total con conjunto de entrenamiento") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 20, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 25, hjust = 0.5, margin = margin(0, 0, 25, 0)))
ggplot(executions_results) +
geom_density(aes(x = acc_train)) +
xlab("") +
ylab("") +
ggtitle("Entrenamiento total con conjunto de entrenamiento") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 35, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 45, hjust = 0.5, margin = margin(0, 0, 25, 0)))
ggplot(executions_results) +
geom_density(aes(x = acc_train)) +
xlab("") +
ylab("") +
ggtitle("Entrenamiento total con conjunto de entrenamiento") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 35, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 35, hjust = 0.5, margin = margin(0, 0, 25, 0)))
ggplot(executions_results) +
geom_density(aes(x = acc_train)) +
xlab("") +
ylab("") +
ggtitle("Entrenamiento total - entrenamiento") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 35, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 35, hjust = 0.5, margin = margin(0, 0, 25, 0)))
ggplot(executions_results) +
geom_density(aes(x = acc_validation)) +
xlab("") +
ylab("") +
ggtitle("Entrenamiento total - validaci√≥n") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 35, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 35, hjust = 0.5, margin = margin(0, 0, 25, 0)))
ggplot(executions_results) +
geom_density(aes(x = acc_test)) +
xlab("") +
ylab("") +
ggtitle("Entrenamiento total - pruebas") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 35, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 35, hjust = 0.5, margin = margin(0, 0, 25, 0)))
plot(density(executions_results$acc_test))
ggplot(executions_results) +
geom_density(aes(x = acc_test)) +
xlab("") +
ylab("") +
scale_x_continuous(breaks = seq(0.90, 1.10, 0.1)) +
ggtitle("Entrenamiento total - pruebas") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 35, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 35, hjust = 0.5, margin = margin(0, 0, 25, 0)))
ggplot(executions_results) +
geom_density(aes(x = acc_test)) +
xlab("") +
ylab("") +
scale_x_continuous(breaks = seq(0.90, 1.10, 0.01)) +
ggtitle("Entrenamiento total - pruebas") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 35, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 35, hjust = 0.5, margin = margin(0, 0, 25, 0)))
ggplot(executions_results) +
geom_density(aes(x = acc_test)) +
xlab("") +
ylab("") +
scale_x_continuous(breaks = seq(0.90, 1.20, 0.01)) +
ggtitle("Entrenamiento total - pruebas") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 35, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 35, hjust = 0.5, margin = margin(0, 0, 25, 0)))
seq(0.90, 1.20, 0.01)
ggplot(executions_results) +
geom_histogram(aes(x = acc_test)) +
xlab("") +
ylab("") +
ggtitle("Entrenamiento total - pruebas") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 35, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 35, hjust = 0.5, margin = margin(0, 0, 25, 0)))
ggplot(executions_results) +
geom_histogram(aes(x = acc_test)) +
xlab("") +
ylab("") +
scale_x_continuous(breaks=c(0.90, 0.92, 0.94, 0.96, 0.98, 1.00, 1.20)) +
ggtitle("Entrenamiento total - pruebas") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 35, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 35, hjust = 0.5, margin = margin(0, 0, 25, 0)))
library("xlsx")
library("ggplot2")
library("sets")
library("keras")
library("stringr")
setwd("D:/Usuarios/cvazquezlos/GitHub/Genetic-programming-for-Artificial-Neural-Networks/results")
TARGET_FOLDER <- "./classification/car/total"
# Analysis of the resulting dataframes for each execution
BASE_DATA_FRAME <- data.frame(architecture = character(),
saved_model = character(),
acc_train = double(),
acc_validation = double(),
acc_test = double(),
stringsAsFactors = FALSE)
executions <- list.files(TARGET_FOLDER)
executions_results <- BASE_DATA_FRAME
y <- lapply(executions, function (x) {
df = readRDS(paste0(TARGET_FOLDER, "/", x, "/execution_results.rds"))
executions_results <<- rbind(executions_results, df[,c("architecture", "saved_model", "acc_train", "acc_validation", "acc_test")])
})
rm("y")
executions_results$architecture <- as.character(executions_results$architecture)
executions_results$architecture <- gsub("_", "/", executions_results$architecture)
executions_results$saved_model <- NULL
analysis_results <- aggregate(executions_results[,c(1:4)],
by = list(executions_results$architecture),
FUN = min)
analysis_results$architecture <- NULL
colnames(analysis_results) <- c("architecture", "acc_train", "acc_validation", "acc_test")
analysis_results$architecture <- gsub("_", "/", analysis_results$architecture)
analysis_results$percentage <- unlist(lapply(analysis_results$architecture, function(x) {
round((nrow(executions_results[executions_results$architecture == x,])/nrow(executions_results) * 100), 2)
}))
analysis_results <- analysis_results[order(analysis_results$percentage, decreasing = TRUE),]
row.names(analysis_results) <- c(1:nrow(analysis_results))
write.csv(analysis_results, file = "../results/classification/car/executions_results_total_MIN.csv")
write.xlsx(analysis_results, file = "../results/classification/car/executions_results_total_MIN.xlsx")
analysis_results <- aggregate(executions_results[,c(1:4)],
by = list(executions_results$architecture),
FUN = max)
analysis_results$architecture <- NULL
colnames(analysis_results) <- c("architecture", "acc_train", "acc_validation", "acc_test")
analysis_results$architecture <- gsub("_", "/", analysis_results$architecture)
analysis_results$percentage <- unlist(lapply(analysis_results$architecture, function(x) {
round((nrow(executions_results[executions_results$architecture == x,])/nrow(executions_results) * 100), 2)
}))
analysis_results <- analysis_results[order(analysis_results$percentage, decreasing = TRUE),]
row.names(analysis_results) <- c(1:nrow(analysis_results))
write.csv(analysis_results, file = "../results/classification/car/executions_results_total_MAX.csv")
write.xlsx(analysis_results, file = "../results/classification/car/executions_results_total_MAX.xlsx")
analysis_results <- aggregate(executions_results[,c(1:4)],
by = list(executions_results$architecture),
FUN = sd)
analysis_results$architecture <- NULL
colnames(analysis_results) <- c("architecture", "acc_train", "acc_validation", "acc_test")
analysis_results$architecture <- gsub("_", "/", analysis_results$architecture)
analysis_results$percentage <- unlist(lapply(analysis_results$architecture, function(x) {
round((nrow(executions_results[executions_results$architecture == x,])/nrow(executions_results) * 100), 2)
}))
analysis_results <- analysis_results[order(analysis_results$percentage, decreasing = TRUE),]
row.names(analysis_results) <- c(1:nrow(analysis_results))
write.csv(analysis_results, file = "../results/classification/car/executions_results_total_SD.csv")
write.xlsx(analysis_results, file = "../results/classification/car/executions_results_total_SD.xlsx")
library("xlsx")
library("ggplot2")
setwd("D:/Usuarios/cvazquezlos/GitHub/Genetic-programming-for-Artificial-Neural-Networks/results")
TARGET_FOLDER <- "./classification/car/partial/"
# Analysis of the resulting dataframes for each execution
BASE_DATA_FRAME <- data.frame(architecture = character(),
partial_acc_train = double(),
partial_acc_validation = double(),
partial_acc_test = double(),
saved_model = character(),
total_acc_train = double(),
total_acc_validation = double(),
total_acc_test = double(),
stringsAsFactors = FALSE)
executions <- list.files(TARGET_FOLDER)
executions_results_part <- BASE_DATA_FRAME
y <- lapply(executions, function (x) {
df = readRDS(paste0(TARGET_FOLDER, "/", x, "/execution_results.rds"))
executions_results_part <<- rbind(executions_results_part, df)
})
rm("y")
# executions_results_part <- executions_results_part[order(executions_results_part$execution, decreasing = FALSE),]
row.names(executions_results_part) <- c(1:nrow(executions_results_part))
executions_results_part$architecture <- as.character(executions_results_part$architecture)
analysis_results <- aggregate(executions_results_part[,c(1:4,6:8)],
by = list(executions_results_part$architecture),
FUN = sd)
analysis_results <- analysis_results[,c(1,3:8)]
colnames(analysis_results) <- c("architecture", "partial_acc_train", "partial_acc_validation", "partial_acc_test", "total_acc_train", "total_acc_validation", "total_acc_test")
analysis_results$percentage <- unlist(lapply(analysis_results$architecture, function(x) {
round((nrow(executions_results_part[executions_results_part$architecture == x,])/nrow(executions_results_part) * 100), 2)
}))
analysis_results <- analysis_results[order(analysis_results$percentage, decreasing = TRUE),]
row.names(analysis_results) <- c(1:nrow(analysis_results))
write.csv(analysis_results, file = "../results/classification/car/executions_results_part_partial_SD.csv")
write.xlsx(analysis_results, file = "../results/classification/car/executions_results_part_partial_SD.xlsx")
analysis_results <- aggregate(executions_results_part[,c(1:4,6:8)],
by = list(executions_results_part$architecture),
FUN = min)
analysis_results <- analysis_results[,c(1,3:8)]
colnames(analysis_results) <- c("architecture", "partial_acc_train", "partial_acc_validation", "partial_acc_test", "total_acc_train", "total_acc_validation", "total_acc_test")
analysis_results$percentage <- unlist(lapply(analysis_results$architecture, function(x) {
round((nrow(executions_results_part[executions_results_part$architecture == x,])/nrow(executions_results_part) * 100), 2)
}))
analysis_results <- analysis_results[order(analysis_results$percentage, decreasing = TRUE),]
row.names(analysis_results) <- c(1:nrow(analysis_results))
write.csv(analysis_results, file = "../results/classification/car/executions_results_part_partial_MIN.csv")
write.xlsx(analysis_results, file = "../results/classification/car/executions_results_part_partial_MAX.xlsx")
write.xlsx(analysis_results, file = "../results/classification/car/executions_results_part_partial_MIN.xlsx")
analysis_results <- aggregate(executions_results_part[,c(1:4,6:8)],
by = list(executions_results_part$architecture),
FUN = max)
analysis_results <- analysis_results[,c(1,3:8)]
colnames(analysis_results) <- c("architecture", "partial_acc_train", "partial_acc_validation", "partial_acc_test", "total_acc_train", "total_acc_validation", "total_acc_test")
analysis_results$percentage <- unlist(lapply(analysis_results$architecture, function(x) {
round((nrow(executions_results_part[executions_results_part$architecture == x,])/nrow(executions_results_part) * 100), 2)
}))
analysis_results <- analysis_results[order(analysis_results$percentage, decreasing = TRUE),]
row.names(analysis_results) <- c(1:nrow(analysis_results))
write.csv(analysis_results, file = "../results/classification/car/executions_results_part_partial_Max.csv")
write.xlsx(analysis_results, file = "../results/classification/car/executions_results_part_partial_Max.xlsx")
library("xlsx")
library("ggplot2")
setwd("D:/Usuarios/cvazquezlos/GitHub/Genetic-programming-for-Artificial-Neural-Networks/results")
TARGET_FOLDER <- "./classification/car/partial/"
# Analysis of the resulting dataframes for each execution
BASE_DATA_FRAME <- data.frame(architecture = character(),
partial_acc_train = double(),
partial_acc_validation = double(),
partial_acc_test = double(),
saved_model = character(),
total_acc_train = double(),
total_acc_validation = double(),
total_acc_test = double(),
stringsAsFactors = FALSE)
executions <- list.files(TARGET_FOLDER)
executions_results_part <- BASE_DATA_FRAME
y <- lapply(executions, function (x) {
df = readRDS(paste0(TARGET_FOLDER, "/", x, "/execution_results.rds"))
executions_results_part <<- rbind(executions_results_part, df)
})
rm("y")
# executions_results_part <- executions_results_part[order(executions_results_part$execution, decreasing = FALSE),]
row.names(executions_results_part) <- c(1:nrow(executions_results_part))
executions_results_part$architecture <- as.character(executions_results_part$architecture)
library("xlsx")
library("ggplot2")
library("sets")
library("keras")
library("stringr")
setwd("D:/Usuarios/cvazquezlos/GitHub/Genetic-programming-for-Artificial-Neural-Networks/results")
TARGET_FOLDER <- "./classification/car/total"
# Analysis of the resulting dataframes for each execution
BASE_DATA_FRAME <- data.frame(architecture = character(),
saved_model = character(),
acc_train = double(),
acc_validation = double(),
acc_test = double(),
stringsAsFactors = FALSE)
executions <- list.files(TARGET_FOLDER)
executions_results <- BASE_DATA_FRAME
y <- lapply(executions, function (x) {
df = readRDS(paste0(TARGET_FOLDER, "/", x, "/execution_results.rds"))
executions_results <<- rbind(executions_results, df[,c("architecture", "saved_model", "acc_train", "acc_validation", "acc_test")])
})
rm("y")
executions_results$architecture <- as.character(executions_results$architecture)
executions_results$architecture <- gsub("_", "/", executions_results$architecture)
executions_results$saved_model <- NULL
##################################################################################
plot_df = data.frame("Entrenamiento total" = executions_results$acc_train,
"Entrenamiento parcial hasta el final" = executions_results_part$total_acc_train,
stringsAsFactors = FALSE)
boxplot(plot_df$Entrenamiento.total)
boxplot(executions_results_part$total_acc_validation)
ggplot(plot_df) +
geom_boxplot(aes(x = 1, y = Entrenamiento.total)) +
geom_boxplot(aes(x = 2, y = Entrenamiento.parcial.hasta.el.final)) +
xlab("\nModo de entrenamiento") +
scale_x_continuous(breaks = c(1, 2), labels = c("Total", "Parcial (hasta el final)")) +
ylab("Accuracy\n") +
scale_y_continuous(breaks = c(0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00)) +
ggtitle("Comparativa de las ejecuciones para\nlos datos de pruebas") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 25, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 30, hjust = 0.5, margin = margin(0, 0, 25, 0)))
ggplot(plot_df) +
geom_boxplot(aes(x = 1, y = Entrenamiento.total)) +
geom_boxplot(aes(x = 2, y = Entrenamiento.parcial.hasta.el.final)) +
xlab("\nModo de entrenamiento") +
scale_x_continuous(breaks = c(1, 2), labels = c("Total", "Parcial (hasta el final)")) +
ylab("Accuracy\n") +
scale_y_continuous(breaks = c(0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00)) +
ggtitle("Comparativa de las ejecuciones para\nlos datos de entrenamiento") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 25, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 30, hjust = 0.5, margin = margin(0, 0, 25, 0)))
##################################################################################
plot_df = data.frame("Entrenamiento total" = executions_results$acc_validation,
"Entrenamiento parcial hasta el final" = executions_results_part$total_acc_validation,
stringsAsFactors = FALSE)
ggplot(plot_df) +
geom_boxplot(aes(x = 1, y = Entrenamiento.total)) +
geom_boxplot(aes(x = 2, y = Entrenamiento.parcial.hasta.el.final)) +
xlab("\nModo de entrenamiento") +
scale_x_continuous(breaks = c(1, 2), labels = c("Total", "Parcial (hasta el final)")) +
ylab("Accuracy\n") +
scale_y_continuous(breaks = c(0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00)) +
ggtitle("Comparativa de las ejecuciones para\nlos datos de validaci√≥n") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 25, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 30, hjust = 0.5, margin = margin(0, 0, 25, 0)))
##################################################################################
plot_df = data.frame("Entrenamiento total" = executions_results$acc_test,
"Entrenamiento parcial hasta el final" = executions_results_part$total_acc_test,
stringsAsFactors = FALSE)
ggplot(plot_df) +
geom_boxplot(aes(x = 1, y = Entrenamiento.total)) +
geom_boxplot(aes(x = 2, y = Entrenamiento.parcial.hasta.el.final)) +
xlab("\nModo de entrenamiento") +
scale_x_continuous(breaks = c(1, 2), labels = c("Total", "Parcial (hasta el final)")) +
ylab("Accuracy\n") +
scale_y_continuous(breaks = c(0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00)) +
ggtitle("Comparativa de las ejecuciones para\nlos datos de validaci√≥n") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 25, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 30, hjust = 0.5, margin = margin(0, 0, 25, 0)))
ggplot(plot_df) +
geom_boxplot(aes(x = 1, y = Entrenamiento.total)) +
geom_boxplot(aes(x = 2, y = Entrenamiento.parcial.hasta.el.final)) +
xlab("\nModo de entrenamiento") +
scale_x_continuous(breaks = c(1, 2), labels = c("Total", "Parcial (hasta el final)")) +
ylab("Accuracy\n") +
scale_y_continuous(breaks = c(0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00)) +
ggtitle("Comparativa de las ejecuciones para\nlos datos de pruebas") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 25, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 30, hjust = 0.5, margin = margin(0, 0, 25, 0)))
setwd("D:/Usuarios/cvazquezlos/GitHub/Genetic-programming-for-Artificial-Neural-Networks/results")
TARGET_FOLDER <- "./classification/iris/partial/"
# Analysis of the resulting dataframes for each execution
BASE_DATA_FRAME <- data.frame(architecture = character(),
partial_acc_train = double(),
partial_acc_validation = double(),
partial_acc_test = double(),
saved_model = character(),
total_acc_train = double(),
total_acc_validation = double(),
total_acc_test = double(),
stringsAsFactors = FALSE)
executions <- list.files(TARGET_FOLDER)
executions_results_part <- BASE_DATA_FRAME
y <- lapply(executions, function (x) {
df = readRDS(paste0(TARGET_FOLDER, "/", x, "/execution_results.rds"))
executions_results_part <<- rbind(executions_results_part, df)
})
rm("y")
# executions_results_part <- executions_results_part[order(executions_results_part$execution, decreasing = FALSE),]
row.names(executions_results_part) <- c(1:nrow(executions_results_part))
executions_results_part$architecture <- as.character(executions_results_part$architecture)
setwd("D:/Usuarios/cvazquezlos/GitHub/Genetic-programming-for-Artificial-Neural-Networks/results")
TARGET_FOLDER <- "./classification/iris/total"
# Analysis of the resulting dataframes for each execution
BASE_DATA_FRAME <- data.frame(architecture = character(),
saved_model = character(),
acc_train = double(),
acc_validation = double(),
acc_test = double(),
stringsAsFactors = FALSE)
executions <- list.files(TARGET_FOLDER)
executions_results <- BASE_DATA_FRAME
y <- lapply(executions, function (x) {
df = readRDS(paste0(TARGET_FOLDER, "/", x, "/execution_results.rds"))
executions_results <<- rbind(executions_results, df[,c("architecture", "saved_model", "acc_train", "acc_validation", "acc_test")])
})
rm("y")
executions_results$architecture <- as.character(executions_results$architecture)
executions_results$architecture <- gsub("_", "/", executions_results$architecture)
executions_results$saved_model <- NULL
##################################################################################
plot_df = data.frame("Entrenamiento total" = executions_results$acc_validation,
"Entrenamiento parcial hasta el final" = executions_results_part$total_acc_validation,
stringsAsFactors = FALSE)
ggplot(plot_df) +
geom_boxplot(aes(x = 1, y = Entrenamiento.total)) +
geom_boxplot(aes(x = 2, y = Entrenamiento.parcial.hasta.el.final)) +
xlab("\nModo de entrenamiento") +
scale_x_continuous(breaks = c(1, 2), labels = c("Total", "Parcial (hasta el final)")) +
ylab("Accuracy\n") +
scale_y_continuous(breaks = c(0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00)) +
ggtitle("Comparativa de las ejecuciones para\nlos datos de validaci√≥n") +
theme_classic() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "#E8E8E8"),
text = element_text(size = 25, family = "Cambria"),
plot.title = element_text(family = "Cambria", size = 30, hjust = 0.5, margin = margin(0, 0, 25, 0)))
library("xlsx")
library("ggplot2")
setwd("D:/Usuarios/cvazquezlos/GitHub/Genetic-programming-for-Artificial-Neural-Networks/results")
TARGET_FOLDER <- "./classification/ocean_proximity/partial/"
# Analysis of the resulting dataframes for each execution
BASE_DATA_FRAME <- data.frame(architecture = character(),
partial_acc_train = double(),
partial_acc_validation = double(),
partial_acc_test = double(),
saved_model = character(),
total_acc_train = double(),
total_acc_validation = double(),
total_acc_test = double(),
stringsAsFactors = FALSE)
executions <- list.files(TARGET_FOLDER)
executions_results_part <- BASE_DATA_FRAME
y <- lapply(executions, function (x) {
df = readRDS(paste0(TARGET_FOLDER, "/", x, "/execution_results.rds"))
executions_results_part <<- rbind(executions_results_part, df)
})
rm("y")
# executions_results_part <- executions_results_part[order(executions_results_part$execution, decreasing = FALSE),]
row.names(executions_results_part) <- c(1:nrow(executions_results_part))
executions_results_part$architecture <- as.character(executions_results_part$architecture)
analysis_results <- aggregate(executions_results_part[,c(1:4,6:8)],
by = list(executions_results_part$architecture),
FUN = max)
analysis_results <- analysis_results[,c(1,3:8)]
colnames(analysis_results) <- c("architecture", "partial_acc_train", "partial_acc_validation", "partial_acc_test", "total_acc_train", "total_acc_validation", "total_acc_test")
analysis_results$percentage <- unlist(lapply(analysis_results$architecture, function(x) {
round((nrow(executions_results_part[executions_results_part$architecture == x,])/nrow(executions_results_part) * 100), 2)
}))
analysis_results <- analysis_results[order(analysis_results$percentage, decreasing = TRUE),]
row.names(analysis_results) <- c(1:nrow(analysis_results))
write.csv(analysis_results, file = "../results/classification/ocean_proximity/executions_results_part_partial_MAX.csv")
write.xlsx(analysis_results, file = "../results/classification/ocean_proximity/executions_results_part_partial_MAX.xlsx")
analysis_results <- aggregate(executions_results_part[,c(1:4,6:8)],
by = list(executions_results_part$architecture),
FUN = min)
analysis_results <- analysis_results[,c(1,3:8)]
colnames(analysis_results) <- c("architecture", "partial_acc_train", "partial_acc_validation", "partial_acc_test", "total_acc_train", "total_acc_validation", "total_acc_test")
analysis_results$percentage <- unlist(lapply(analysis_results$architecture, function(x) {
round((nrow(executions_results_part[executions_results_part$architecture == x,])/nrow(executions_results_part) * 100), 2)
}))
analysis_results <- analysis_results[order(analysis_results$percentage, decreasing = TRUE),]
row.names(analysis_results) <- c(1:nrow(analysis_results))
write.csv(analysis_results, file = "../results/classification/ocean_proximity/executions_results_part_partial_MIN.csv")
write.xlsx(analysis_results, file = "../results/classification/ocean_proximity/executions_results_part_partial_MIN.xlsx")
analysis_results <- aggregate(executions_results_part[,c(1:4,6:8)],
by = list(executions_results_part$architecture),
FUN = sd)
analysis_results <- analysis_results[,c(1,3:8)]
colnames(analysis_results) <- c("architecture", "partial_acc_train", "partial_acc_validation", "partial_acc_test", "total_acc_train", "total_acc_validation", "total_acc_test")
analysis_results$percentage <- unlist(lapply(analysis_results$architecture, function(x) {
round((nrow(executions_results_part[executions_results_part$architecture == x,])/nrow(executions_results_part) * 100), 2)
}))
analysis_results <- analysis_results[order(analysis_results$percentage, decreasing = TRUE),]
row.names(analysis_results) <- c(1:nrow(analysis_results))
write.csv(analysis_results, file = "../results/classification/ocean_proximity/executions_results_part_partial_SD.csv")
write.xlsx(analysis_results, file = "../results/classification/ocean_proximity/executions_results_part_partial_SD.xlsx")
