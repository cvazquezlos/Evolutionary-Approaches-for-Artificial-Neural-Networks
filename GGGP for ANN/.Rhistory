i <- i+1
}
return(hidden)
}
evaluation("nnn/n/nnn/n")
evaluation("nnn/n/nnn/nn")
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden <- list()
for(j in head(layers, -1)) {
if (i!=0) {
hidden[i] <- nchar(j)
}
i <- i+1
}
return(hidden)
}
evaluation("nnn/n/nnn/nn")
evaluation("nnn/n/nnn/n/nn")
evaluation("nnn/n/nnnnnn/n/nn")
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden <- list()
for(j in head(layers, -1)) {
if (i!=0) {hidden[i] <- nchar(j)}
i <- i+1
}
return(hidden)
}
evaluation("nnn/n/nnnnnn/n/nn")
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden <- list() # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden[i] <- nchar(j)}
i <- i+1
}
hidden <- unlist(hidden, use.names=FALSE)
return(hidden)
}
evaluation("nnn/n/nnnnnn/n/nn")
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden <- list() # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden[i] <- nchar(j)}
i <- i+1
}
hidden <- unlist(hidden, use.names=FALSE)
return(typeof(hidden))
}
evaluation("nnn/n/nnnnnn/n/nn")
evaluation2 <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden <- vector(mode="numeric", length=0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden <- append(hidden, nchar(j))}
i <- i+1
}
}
evaluation2("nnnn/n/n/nn")
evaluation2 <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden <- vector(mode="numeric", length=0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden <- append(hidden, nchar(j))}
i <- i+1
}
return(hidden)
}
evaluation2("nnnn/n/n/nn")
evaluation2 <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden <- vector(mode="numeric", length=0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden <- append(hidden, nchar(j))}
i <- i+1
}
return(typeof(hidden))
}
evaluation2("nnnn/n/n/nn")
evaluation2 <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden <- vector(mode="numeric", length=0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden <- append(hidden, nchar(j))}
i <- i+1
}
return(class(hidden))
}
evaluation2("nnnn/n/n/nn")
evaluation2 <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden <- character(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden[i] <- nchar(j)}
i <- i+1
}
return(class(hidden))
}
evaluation2("nnnn/n/n/nn")
evaluation2 <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden <- character(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden[i] <- nchar(j)}
i <- i+1
}
return(hidden)
}
evaluation2("nnnn/n/n/nn")
evaluation2 <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden[i] <- nchar(j)}
i <- i+1
}
return(hidden)
}
evaluation2("nnnn/n/n/nn")
return(hidden[1])
evaluation2 <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden[i] <- nchar(j)}
i <- i+1
}
return(hidden[1])
}
return(hidden[1])
return(hidden[1])
evaluation2("nnnn/n/n/nn")
bank <- read.table("./bank.csv")
bank <- read.table("./bank.csv", sep=";")
bank
str(bank)
bank <- read.csv("./bank.csv", header=TRUE, sep=";")
str(bank)
bank[2:6]
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden_l <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden_l[i] <- nchar(j)}
i <- i+1
}
# https://medium.com/analytics-vidhya/build-your-first-neural-network-model-on-a-structured-dataset-using-keras-d9e7de5c6724
# http://www.learnbymarketing.com/tutorials/neural-networks-in-r-tutorial/
bank <- read.csv("./bank.csv", header=TRUE, sep=";")
input <- NULL
output <- NULL
trainingdata <- NULL
nn <- neuralnet(y~age + job + marital + education + default + balance + housing + loan +
contact + day + month + duration + campaign + pdays + previous + poutcome,
bank, hidden=hidden_l, threshold=0.01)
nn$result.matrix
plot(nn)
}
evaluation("nn/nnn/nn/n/nnn/n")
bank$balance <- (bank$balance-min(bank$balance)) / (max(bank$balance)-min(bank$balance))
bank$age <- (bank$age-min(bank$age)) / (max(bank$age)-min(bank$age))
bank$previous <- (bank$previous-min(bank$previous)) / (max(bank$previous)-min(bank$previous))
bank$campaign <- (bank$campaign-min(bank$campaign)) / (max(bank$campaign)-min(bank$campaign))
table(bank$education)
head(model.matrix(~education, data=bank))
bank$education <- relevel(bank$education, ref = "secondary")
head(model.matrix(~education, data=bank))
str(bank)
bank_matrix <- model.matrix(~age+job+marital+education+default+balance+housing+loan+contact+day+month+duration
+campaign+pdays+previous+poutcome+y)
bank_matrix <- model.matrix(~age+job+marital+education+default+balance+housing+loan+contact+day+month+duration
+campaign+pdays+previous+poutcome+y, data=bank)
colnames(bank_matrix)
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden_l <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden_l[i] <- nchar(j)}
i <- i+1
}
# https://medium.com/analytics-vidhya/build-your-first-neural-network-model-on-a-structured-dataset-using-keras-d9e7de5c6724
# http://www.learnbymarketing.com/tutorials/neural-networks-in-r-tutorial/
# Data pre-processing
bank <- read.csv("./bank.csv", header=TRUE, sep=";")
bank$balance <- (bank$balance-min(bank$balance)) / (max(bank$balance)-min(bank$balance))
bank$age <- (bank$age-min(bank$age)) / (max(bank$age)-min(bank$age))
bank$previous <- (bank$previous-min(bank$previous)) / (max(bank$previous)-min(bank$previous))
bank$campaign <- (bank$campaign-min(bank$campaign)) / (max(bank$campaign)-min(bank$campaign))
bank$education <- relevel(bank$education, ref = "secondary")
bank_matrix <- model.matrix(~age+job+marital+education+default+balance+housing+loan+contact+day+month+duration+campaign+pdays+previous+poutcome+y, data=bank)
# There are some names that have invalid characters as "-". We have to fix it.
colnames(bank_matrix)[3] <- "jobbluecollar"
colnames(bank_matrix)[8] <- "jobselfemployed"
col_list <- paste(c(colnames(bank_matrix[, -c(1,43)])), collapse="+")
col_list <- paste(c("yyes~", col_list), colapse="")
f <- formula(col_list)
set.seed(1973549813)
nn <- neuralnet(f, data=bank_matrix, hidden=hidden_l, threshold=0.01, stepmax=1e+06)
plot(nn)
}
evaluation("n/nnn/nn/n")
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden_l <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden_l[i] <- nchar(j)}
i <- i+1
}
print(hidden_l)
# https://medium.com/analytics-vidhya/build-your-first-neural-network-model-on-a-structured-dataset-using-keras-d9e7de5c6724
# http://www.learnbymarketing.com/tutorials/neural-networks-in-r-tutorial/
# Data pre-processing
bank <- read.csv("./bank.csv", header=TRUE, sep=";")
bank$balance <- (bank$balance-min(bank$balance)) / (max(bank$balance)-min(bank$balance))
bank$age <- (bank$age-min(bank$age)) / (max(bank$age)-min(bank$age))
bank$previous <- (bank$previous-min(bank$previous)) / (max(bank$previous)-min(bank$previous))
bank$campaign <- (bank$campaign-min(bank$campaign)) / (max(bank$campaign)-min(bank$campaign))
bank$education <- relevel(bank$education, ref = "secondary")
bank_matrix <- model.matrix(~age+job+marital+education+default+balance+housing+loan+contact+day+month+duration+campaign+pdays+previous+poutcome+y, data=bank)
# There are some names that have invalid characters as "-". We have to fix it.
colnames(bank_matrix)[3] <- "jobbluecollar"
colnames(bank_matrix)[8] <- "jobselfemployed"
col_list <- paste(c(colnames(bank_matrix[, -c(1,43)])), collapse="+")
col_list <- paste(c("yyes~", col_list), colapse="")
f <- formula(col_list)
set.seed(1973549813)
nn <- neuralnet(f, data=bank_matrix, hidden=hidden_l, threshold=0.01, stepmax=1e+06)
plot(nn)
}
evaluation("n/nnn/nn/n")
colnames(bank_matrixÃ§)
colnames(bank_matrix)
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden_l <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden_l[i] <- nchar(j)}
i <- i+1
}
print(hidden_l)
# https://medium.com/analytics-vidhya/build-your-first-neural-network-model-on-a-structured-dataset-using-keras-d9e7de5c6724
# http://www.learnbymarketing.com/tutorials/neural-networks-in-r-tutorial/
# Data pre-processing
bank <- read.csv("./bank.csv", header=TRUE, sep=";")
bank$balance <- (bank$balance-min(bank$balance)) / (max(bank$balance)-min(bank$balance))
bank$age <- (bank$age-min(bank$age)) / (max(bank$age)-min(bank$age))
bank$previous <- (bank$previous-min(bank$previous)) / (max(bank$previous)-min(bank$previous))
bank$campaign <- (bank$campaign-min(bank$campaign)) / (max(bank$campaign)-min(bank$campaign))
bank$education <- relevel(bank$education, ref = "secondary")
bank_matrix <- model.matrix(~age+job+marital+education+default+balance+housing+loan+contact+day+month+duration+campaign+pdays+previous+poutcome+y, data=bank)
# There are some names that have invalid characters as "-". We have to fix it.
colnames(bank_matrix)[3] <- "jobbluecollar"
colnames(bank_matrix)[8] <- "jobselfemployed"
col_list <- paste(c(colnames(bank_matrix[, -c(1,43)])), collapse="+")
col_list <- paste(c("yyes~", col_list), colapse="")
f <- formula(col_list)
set.seed(1973549813)
nn <- neuralnet(f, data=bank_matrix, algorithm = "rprop+", hidden=hidden_l, threshold=0.01, stepmax=1e+06)
plot(nn)
}
evaluation("n/nnn/nn/n")
str(bank)
colnames(bank_matrix)
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden_l <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden_l[i] <- nchar(j)}
i <- i+1
}
print(hidden_l)
# https://medium.com/analytics-vidhya/build-your-first-neural-network-model-on-a-structured-dataset-using-keras-d9e7de5c6724
# http://www.learnbymarketing.com/tutorials/neural-networks-in-r-tutorial/
# Data pre-processing
bank <- read.csv("./bank.csv", header=TRUE, sep=";")
bank$balance <- (bank$balance-min(bank$balance)) / (max(bank$balance)-min(bank$balance))
bank$age <- (bank$age-min(bank$age)) / (max(bank$age)-min(bank$age))
bank$previous <- (bank$previous-min(bank$previous)) / (max(bank$previous)-min(bank$previous))
bank$campaign <- (bank$campaign-min(bank$campaign)) / (max(bank$campaign)-min(bank$campaign))
bank$education <- relevel(bank$education, ref = "secondary")
bank_matrix <- model.matrix(~age+job+marital+education+default+balance+housing+loan+contact+day+month+duration+campaign+pdays+previous+poutcome+y, data=bank)
# There are some names that have invalid characters as "-". We have to fix it.
colnames(bank_matrix)[3] <- "jobbluecollar"
colnames(bank_matrix)[8] <- "jobselfemployed"
col_list <- paste(c(colnames(bank_matrix[, -c(1,44)])), collapse="+")
col_list <- paste(c("yyes~", col_list), colapse="")
f <- formula(col_list)
set.seed(1973549813)
nn <- neuralnet(f, data=bank_matrix, hidden=hidden_l, threshold=0.01, stepmax=1e+06)
plot(nn)
}
evaluation("n/nnn/nn/n")
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden_l <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden_l[i] <- nchar(j)}
i <- i+1
}
print(hidden_l)
# https://medium.com/analytics-vidhya/build-your-first-neural-network-model-on-a-structured-dataset-using-keras-d9e7de5c6724
# http://www.learnbymarketing.com/tutorials/neural-networks-in-r-tutorial/
# Data pre-processing
bank <- read.csv("./bank.csv", header=TRUE, sep=";")
bank$balance <- (bank$balance-min(bank$balance)) / (max(bank$balance)-min(bank$balance))
bank$age <- (bank$age-min(bank$age)) / (max(bank$age)-min(bank$age))
bank$previous <- (bank$previous-min(bank$previous)) / (max(bank$previous)-min(bank$previous))
bank$campaign <- (bank$campaign-min(bank$campaign)) / (max(bank$campaign)-min(bank$campaign))
bank$education <- relevel(bank$education, ref = "secondary")
bank_matrix <- model.matrix(~age+job+marital+education+default+balance+housing+loan+contact+day+month+duration+campaign+pdays+previous+poutcome+y, data=bank)
# There are some names that have invalid characters as "-". We have to fix it.
colnames(bank_matrix)[3] <- "jobbluecollar"
colnames(bank_matrix)[8] <- "jobselfemployed"
col_list <- paste(c(colnames(bank_matrix[, -c(1,44)])), collapse="+")
col_list <- paste(c("yyes~", col_list), colapse="")
f <- formula(col_list)
set.seed(1973549813)
nn <- neuralnet(f, data=bank_matrix, algorithm = "rprop+", hidden=hidden_l, threshold=0.01, stepmax=1e+06)
plot(nn)
}
evaluation("n/nnn/nn/n")
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden_l <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden_l[i] <- nchar(j)}
i <- i+1
}
print(hidden_l)
# https://medium.com/analytics-vidhya/build-your-first-neural-network-model-on-a-structured-dataset-using-keras-d9e7de5c6724
# http://www.learnbymarketing.com/tutorials/neural-networks-in-r-tutorial/
# Data pre-processing
bank <- read.csv("./bank.csv", header=TRUE, sep=";")
bank$balance <- (bank$balance-min(bank$balance)) / (max(bank$balance)-min(bank$balance))
bank$age <- (bank$age-min(bank$age)) / (max(bank$age)-min(bank$age))
bank$previous <- (bank$previous-min(bank$previous)) / (max(bank$previous)-min(bank$previous))
bank$campaign <- (bank$campaign-min(bank$campaign)) / (max(bank$campaign)-min(bank$campaign))
bank$education <- relevel(bank$education, ref = "secondary")
bank_matrix <- model.matrix(~age+job+marital+education+default+balance+housing+loan+contact+day+month+duration+campaign+pdays+previous+poutcome+y, data=bank)
# There are some names that have invalid characters as "-". We have to fix it.
colnames(bank_matrix)[3] <- "jobbluecollar"
colnames(bank_matrix)[8] <- "jobselfemployed"
col_list <- paste(c(colnames(bank_matrix[, -c(1,44)])), collapse="+")
col_list <- paste(c("yyes~", col_list), colapse="")
f <- formula(col_list)
set.seed(2)
nn <- neuralnet(f, data=bank_matrix, hidden=hidden_l, threshold=0.01, linear.output = T)
plot(nn)
}
evaluation("n/nnn/nn/n")
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden_l <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden_l[i] <- nchar(j)}
i <- i+1
}
print(hidden_l)
# https://medium.com/analytics-vidhya/build-your-first-neural-network-model-on-a-structured-dataset-using-keras-d9e7de5c6724
# http://www.learnbymarketing.com/tutorials/neural-networks-in-r-tutorial/
# Data pre-processing
bank <- read.csv("./bank.csv", header=TRUE, sep=",")
samplesize = 0.60 * nrow(data)
set.seed(80)
index = sample(seq_len(nrow(data)), size=samplesize)
datatrain = data[index,]
dataset = data[-index,]
max = apply(data, 2, max)
min = apply(data, 2, min)
scaled = as.data.frame(scala(data, center=min, scale=max-min))
trainNN = scaled[index,]
testNN = scaled[-index,]
set.seed(2)
nn <- neuralnet(rating~calories+protein+fat+sodium+fiber, trainNN, hidden=hidden_l, linear.output=T)
plot(nn)
}
evaluation("n/nnn/nn/n")
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden_l <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden_l[i] <- nchar(j)}
i <- i+1
}
print(hidden_l)
# https://medium.com/analytics-vidhya/build-your-first-neural-network-model-on-a-structured-dataset-using-keras-d9e7de5c6724
# http://www.learnbymarketing.com/tutorials/neural-networks-in-r-tutorial/
# Data pre-processing
bank <- read.csv("./bank.csv", header=TRUE, sep=",")
samplesize = 0.60 * nrow(data)
set.seed(80)
index <- sample(seq_len(nrow(data)), size=samplesize)
datatrain <- data[index,]
dataset <- data[-index,]
max <- apply(data, 2, max)
min <- apply(data, 2, min)
scaled <- as.data.frame(scala(data, center=min, scale=max-min))
trainNN <- scaled[index,]
testNN <- scaled[-index,]
set.seed(2)
nn <- neuralnet(rating~calories+protein+fat+sodium+fiber, trainNN, hidden=hidden_l, linear.output=T)
plot(nn)
}
evaluation("n/nnn/nn/n")
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden_l <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden_l[i] <- nchar(j)}
i <- i+1
}
print(hidden_l)
# https://medium.com/analytics-vidhya/build-your-first-neural-network-model-on-a-structured-dataset-using-keras-d9e7de5c6724
# http://www.learnbymarketing.com/tutorials/neural-networks-in-r-tutorial/
# Data pre-processing
data <- read.csv("./bank.csv", header=TRUE, sep=",")
samplesize = 0.60 * nrow(data)
set.seed(80)
index <- sample(seq_len(nrow(data)), size=samplesize)
datatrain <- data[index,]
dataset <- data[-index,]
max <- apply(data, 2, max)
min <- apply(data, 2, min)
scaled <- as.data.frame(scala(data, center=min, scale=max-min))
trainNN <- scaled[index,]
testNN <- scaled[-index,]
set.seed(2)
nn <- neuralnet(rating~calories+protein+fat+sodium+fiber, trainNN, hidden=hidden_l, linear.output=T)
plot(nn)
}
evaluation("n/nnn/nn/n")
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden_l <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden_l[i] <- nchar(j)}
i <- i+1
}
print(hidden_l)
# https://medium.com/analytics-vidhya/build-your-first-neural-network-model-on-a-structured-dataset-using-keras-d9e7de5c6724
# http://www.learnbymarketing.com/tutorials/neural-networks-in-r-tutorial/
# Data pre-processing
data <- read.csv("./bank.csv", header=TRUE, sep=",")
samplesize = 0.60 * nrow(data)
set.seed(80)
index <- sample(seq_len(nrow(data)), size=samplesize)
datatrain <- data[index,]
dataset <- data[-index,]
max <- apply(data, 2, max)
min <- apply(data, 2, min)
scaled <- as.data.frame(scale(data, center=min, scale=max-min))
trainNN <- scaled[index,]
testNN <- scaled[-index,]
set.seed(2)
nn <- neuralnet(rating~calories+protein+fat+sodium+fiber, trainNN, hidden=hidden_l, linear.output=T)
plot(nn)
}
evaluation("n/nnn/nn/n")
evaluation <- function(l) {
layers <- strsplit(l, "/")[[1]]
i <- 0
hidden_l <- numeric(0) # Contains the number of hidden layers and the number of neurons of each hidden layer.
for(j in head(layers, -1)) {
if (i!=0) {hidden_l[i] <- nchar(j)}
i <- i+1
}
print(hidden_l)
# https://medium.com/analytics-vidhya/build-your-first-neural-network-model-on-a-structured-dataset-using-keras-d9e7de5c6724
# http://www.learnbymarketing.com/tutorials/neural-networks-in-r-tutorial/
# Data pre-processing
data <- read.csv("./cereals.csv", header=TRUE, sep=",")
samplesize = 0.60 * nrow(data)
set.seed(80)
index <- sample(seq_len(nrow(data)), size=samplesize)
datatrain <- data[index,]
dataset <- data[-index,]
max <- apply(data, 2, max)
min <- apply(data, 2, min)
scaled <- as.data.frame(scale(data, center=min, scale=max-min))
trainNN <- scaled[index,]
testNN <- scaled[-index,]
set.seed(2)
nn <- neuralnet(rating~calories+protein+fat+sodium+fiber, trainNN, hidden=hidden_l, linear.output=T)
plot(nn)
}
evaluation("n/nnn/nn/n")
evaluation("n/n/n")
